#!/usr/bin/env ruby

USERNAME = "root"
HOSTNAME = "proxima.andreicek.lan"

def help
	puts "vmmng [list | status | on | off | restart] {Vmid}"
	puts "	list - This will list all available VM's on the ESXi host"
	puts "	status {Vmid} - Checks the power state of the specified VM"
	puts "	on {Vmid} - Turns on the VM"
	puts "	off {Vmid} - Turns off the VM"
	puts "	restart {Vmid} - Turns on and off the VM"
	abort
end

def connection
	return "ssh " + USERNAME + "@" + HOSTNAME
end

def list
	esxi_Cmd = "vim-cmd vmsvc/getallvms"
	output = `#{connection() + " " + esxi_Cmd}`
	puts output
end

def status
	esxi_Cmd = "vim-cmd vmsvc/power.getstate"
	vm_Id = ARGV[1]
	output = `#{connection() + " " + esxi_Cmd + " " + vm_Id}`
	puts output
end

def VmOn
	esxi_Cmd = "vim-cmd vmsvc/power.on"
	vm_Id = ARGV[1]
	output = `#{connection() + " " + esxi_Cmd + " " + vm_Id}`
	puts output
end

def VmOff
	esxi_Cmd = "vim-cmd vmsvc/power.off"
	vm_Id = ARGV[1]
	output = `#{connection() + " " + esxi_Cmd + " " + vm_Id}`
	puts output
end

def create
	vm_name = ARGV[1]
	config_url = ARGV[2]
	new_vm_path = "/vmfs/volumes/SSD_01/" + vm_name
	esxi_Cmd_mkdir = "mkdir /vmfs/volumes/SSD_01/" + vm_name
	output = `#{connection() + " " + esxi_Cmd_mkdir}`
	esxi_Cmd_disk = "vmkfstools -c 15G -a lsilogic " + new_vm_path + "/" + vm_name + ".vmdk"
	output = `#{connection() + " " + esxi_Cmd_disk}`
	esxi_Cmd_config = "wget -O " + new_vm_path + "/" + vm_name + ".vmx " + config_url
	output = `#{connection() + " " + esxi_Cmd_config}`
	esxi_Cmd_config_774 = "chmod 744 " + new_vm_path + "/" + vm_name + ".vmx"
	output = `#{connection() + " " + esxi_Cmd_config_774}`
  esxi_Cmd_register = "vim-cmd solo/registervm " + new_vm_path + "/" + vm_name + ".vmx " + vm_name
	output = `#{connection() + " " + esxi_Cmd_register}`
end

def menu
	choice = ARGV[0]
	if (choice == "list")
		list()
	elsif (choice == "status")
		status()
	elsif (choice == "on")
		VmOn()
	elsif (choice == "off")
		VmOff()
	elsif (choice == "restart")
		VmOff()
		sleep 5
		VmOn()
		status()
	elsif (choice == "create")
		create()
	else
		help
	end
end

menu
